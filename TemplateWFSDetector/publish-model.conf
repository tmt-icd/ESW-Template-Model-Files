subsystem = ESW
component = template-wfs-detector

publish {
  description = """
    The events here are Observe Events. The Observe Events themselves are light with only the ObsId. The state information is
    present in two specific events that are published to monitor state. This separates state from pure events.
  """
	events = [
		{
			name = publishSuccess
			description = """
This Observe Event indicates that the indicates the WFS or guider detector system has successfully published an image to VBDS.
The preferred publisher is the VBDS Transfer Service but the Detector Assembly is an option if appropriate.
"""
			archive = true
			attributes = [
        {
          name = detector
          description = "Detector description from which the readout is generated. This may be an number or simple matchable string"
          type = string
        }
        {
          name = stream
          description = "The name of the stream on which the image was published"
          type = string
        }
			]
		}
		{
			name = publishFailed
			description = """
This Observe Event indicates that the indicates the WFS or guider detector system has failed while publishing an image to VBDS.
The preferred publisher is the VBDS Transfer Service but the Detector Assembly is an option if appropriate.
			"""
			archive = true
      attributes = [
        {
          name = detector
          description = "Detector description from which the readout is generated. This may be an number or simple matchable string"
          type = string
        }
        {
          name = stream
          description = "The name of the stream on which the image was publishing and failed"
          type = string
        }
      ]
    }
		{
			name = wfsDetectorExposureState
			description = """
			An WFS exposure state Observe Event is provided as a state variable to indicate the current state of the detector system.
			The Exposure State Event groups parameters that change relatively slowly, and this event should be published whenever any of its parameters changes.
"""
			archive = true
			attributes = [
				{
					name = detector
          description = "Detector description from which the readout is generated. This may be an number or simple matchable string"
					type = string
				}
        {
          name = exposureInProgress
          description = """
            A boolean indictating if detector system is acquiring an exposure.
            It is delimited by exposureStart and exposureEnd Observe Events.
            exposureInProgress should be false if abortInProgress is true (TBD).
          """
          type = boolean
        }
        {
          name = abortInProgress
          description = """
            A boolean indictating if an abort has been requested and is underway
          """
          type = boolean
        }
        {
          name = isAborted
          description = """
            A boolean indictating if an abort has occurred and is completed.
            abortInProgress should be false when isAborted is true.
            isAborted should be set to false with the start of the next exposure
          """
          type = boolean
        }
				{
					name = operationalState
					description = """
					  An enumeration that indicates if the detector system is available and operational with values: READY, BUSY, ERROR.
					  *Allowable Values*
					  <ul>
					  <li>READY - indicates the system can execute exposures.
					  <li>BUSY  - indicates system is BUSY with the most likely reason being it is acquiring data
					  <li>ERROR - indicates the detector system is in an error state. This could happen as a result of a command or due to a spontaneous failure. Corrective action is required. The operationalState is reset to READY if the failure is cleared or when the next exposure is started.
					  </ul>
					"""
          enum = [ READY | BUSY | ERROR ]
				}
        {
          name = errorMessage
          description = """
					  An optional parameter that can be included when the detector system is in the ERROR operationalState to help understand the error state.
					  This value should be cleared and removed from the state when the operationalState returns to READY.
					"""
          type = string
        }
			]
		}
	]
}
