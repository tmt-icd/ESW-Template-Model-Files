subsystem = ESW
component = template-IR-detector

publish {
  description = """
    The events here are Observe Events. The Observe Events themselves are light with only the ObsId. The state information is
    present in two specific events that are published to monitor state. This separates state from pure events.
  """
	events = [
		{
			name = exposureStart
			description = """
This Observe Event indicates the start of data acquisition that results in a file produced for DMS. This is a potential metadata event for DMS.
The preferred publisher is the Detector Assembly but the Instrument Sequencer is an option if impossible for the Detector Assembly.
"""
			archive = true
			attributes = [
				{
					name = obsId
					description = "Observation ID which the current exposure belongs to."
					type = string
				}
			]
		}
    {
      name = exposureEnd
      description = """
This Observe Event indicates the end of data acquisition that results in a file produced for DMS. This is a potential metadata event for DMS.
The preferred publisher is the Detector Assembly but the Instrument Sequencer is an option if impossible for the Detector Assembly.
"""
      archive = true
      attributes = [
        {
          name = obsId
          description = "Observation ID which the current exposure belongs to."
          type = string
        }
      ]
    }

		{
			name = readoutEnd
			description = """
This Observe Event indicates that a readout that is part of a ramp has completed.
The preferred publisher is the Detector HCD but the Detector Assembly is an option if impossible for the Detector HCD.
"""
			archive = true
			attributes = [
				{
					name = detector
					description = "Detector description from which the readout is generated. This may be an number or simple matchable string"
					type = string
				}
				{
					name = read
					description = "Read # of the readout within a ramp."
					type = integer
					minimum = 1
					maximum = 99999
				}
				{
					name = ramp
					description = "Ramp # which the readout belongs to."
					type = integer
					minimum = 1
					maximum = 99999
				}
				{
					name = obsId
					description = "Observation ID which the exposure belongs to."
					type = string
				}
			]
		}

    {
      name = readoutFailed
      description = """
This Observe Event indicates that a readout that is part of a ramp has failed indicating transfer failure or some other issue.
The preferred publisher is the Detector HCD but the Detector Assembly is an option if impossible for the Detector HCD.
"""
      archive = true
      attributes = [
        {
          name = detector
          description = "Detector description from which the failed readout is generated. This may be an number or simple matchable string"
          type = string
        }
        {
          name = read
          description = "Read number of the failed readout within a ramp."
          type = integer
          minimum = 1
          maximum = 99999
        }
        {
          name = ramp
          description = "Ramp number which the readout failure belongs to."
          type = integer
          minimum = 1
          maximum = 99999
        }
        {
          name = obsId
          description = "Observation ID which the failed readout belongs to."
          type = string
        }
      ]
    }

		{
			name = dataWriteStart
			description = """
This Observe Event indicates that the instrument or detector assembly has started writing the exposure data file or transfer
of exposure data to DMS.
The preferred publisher is the Detector Assembly but the Detector HCD is an option if impossible for the Detector Assembly.
"""
			archive = true
			attributes = [
				{
					name = obsId
					description = "Observation ID which the current exposure belongs to."
					type = string
				}
        {
          name = fileId
          description = "File ID of the data file that is being written or transferred."
          type = string
        }
			]
		}

    {
      name = dataWriteEnd
      description = """
This Observe Event indicates that the instrument or detector assembly has finished writing the exposure data file or transfer
of exposure data to DMS.
The preferred publisher is the Detector Assembly but the Detector HCD is an option if impossible for the Detector Assembly.
"""
      archive = true
      attributes = [
        {
          name = obsId
          description = "Observation ID which the current exposure belongs to."
          type = string
        }
        {
          name = fileId
          description = "File ID of the data file that is being written or transferred."
          type = string
        }
      ]
    }

		{
			name = exposureAborted
			description = """
			This Observe Event indicates that a request was made to abort the exposure and it has completed.
			Normal data events should occur if data is recoverable
			Abort should not fail.
			The preferred publisher is the Detector Assembly but the Detector HCD is an option if impossible for the Detector Assembly.
			"""
			archive = true
			attributes = [
				{
					name = obsId
					description = "Observation ID which the current exposure belongs to."
					type = string
				}
			]
		}
		{
			name = irDetectorExposureState
			description = """
			There are two standardized IR detector state Observe Events.
			The irDetectorExposureState is provided as a state variable to indicate the current state of the detector system.
			The irDetectorExposureState groups parameters that change relatively slowly, and this event should be published whenever any of its parameters changes.
			Note that this describes the entire detector system from the pont of view of DMS. If a single file is written for
			multiple detectors, then this covers all detectors as a single detector system.
"""
			archive = true
			attributes = [
				{
					name = detector
          description = "Detector description from which the readout is generated. This may be an number or simple matchable string"
					type = string
				}
        {
          name = exposureInProgress
          description = """
            A boolean indictating if detector system is acquiring an exposure.
            It is delimited by exposureStart and exposureEnd Observe Events.
            exposureInProgress should be false if abortInProgress is true (TBD).
          """
          type = boolean
        }
        {
          name = abortInProgress
          description = """
            A boolean indictating if an abort has been requested and is underway
          """
          type = boolean
        }
        {
          name = isAborted
          description = """
            A boolean indictating if an abort has occurred and is completed.
            abortInProgress should be false when isAborted is true.
            isAborted should be set to false with the start of the next exposure
          """
          type = boolean
        }
				{
					name = operationalState
					description = """
				  An enumeration that indicates if the detector system is available and operational with values: READY, BUSY, ERROR.
					  *Allowable Values*
					  <ul>
					  <li>READY - indicates the system can execute exposures.
					  <li>BUSY  - indicates system is BUSY with the most likely reason being it is acquiring data
					  <li>ERROR - indicates the detector system is in an error state. This could happen as a result of a command or due to a spontaneous failure. Corrective action is required. The operationalState is reset to READY if the failure is cleared or when the next exposure is started.
					  </ul>
					"""
          enum = [ READY | BUSY | ERROR ]
				}
        {
          name = errorMessage
          description = """
					  An optional parameter that can be included when the detector system is in the ERROR operationalState to help understand the error state.
					  This value should be cleared and removed from the state when the operationalState returns to READY.
					"""
          type = string
        }
				{
					name = obsId
          description = "Observation ID which the current exposure belongs to."
					type = string
				}
			]
		}
    {
      name = irDetectorExposureData
      description = """
        There are two standardized IR detector state Observe Events.
        A second mandatory Observe Event named irDetectorExposureData event contains fast-changing data about the internals of the current exposure.
        This data is useful for user interfaces and Sequencers. This event should be published at the read rate or 1 Hz (whichever is less) during an ongoing exposure.
"""
      archive = true
      attributes = [
        {
          name = detector
          description = "Detector description from which the readout is generated. This may be an number or simple matchable string"
          type = string
        }
        {
          name = readsInRamp
          description = """
            The integer total number of reads in the ramp. Value should be constant during an exposure. (Note: for multi-array detectors, it is assumed that all arrays work with the same configuration).
          """
          type = integer
          minimum = 2
          maximum = 99999
        }
        {
          name = readsComplete
          description = """
            Integer number of currently completed reads from 1 to readsInRamp.
            Should be reset to 0 at the start of every ramp.
          """
          type = integer
          minimum = 0
          maximum = 99999
        }
        {
          name = rampsInExposure
          description = """
            The integer total number of ramps in the current exposure. Value should be constant during an exposure.
          """
          type = integer
          minimum = 1
          maximum = 99999
        }
        {
          name = rampsComplete
          description = """
            Integer number of completed ramps from 1 to rampsInExposure.
            Should be reset to 0 at the start of every exposure.
          """
          type = integer
          minimum = 0
          maximum = 99999
        }
        {
          name = exposureTime
          description = "Length (as a float) in seconds of the current exposure.  For example: 1.25"
          type = float
          units = s
          exclusiveMinimum = 0
        }
        {
          name = remainingExposureTime
          description = """
            Number (as a float) of seconds remaining in the current exposure.  For example: 1.25.
            Should count down in integer seconds -- no faster than 1 Hz.
          """
          type = float
          units = s
          minimum = 0
        }
        {
          name = obsId
          description = "Observation ID which the current exposure belongs to."
          type = string
        }
      ]
    }
	]
}
