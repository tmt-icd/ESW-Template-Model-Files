subsystem = ESW
component = template-ocs-sequencer

description = """
These are the required send and receive commands for an OCS Sequencer.
"""

receive = [
	{
		name = Shutdown
		description = """
	    Every component must be prepared to receive a Shutdown message from outside their component at any time.
	    The Supervisor receives the command and calls the component's onShutdown handler.
	    The component must handle this external command by completing the onShutdown handler of the component top level actor.
	    The component should perform any actions needed prior to shutting down the component.
      When the onShutdown handler returns, the top level actor and all its children are destroyed and the component exits.
	  """
	}
	{
		name = Restart
		description = """
	    Every component must be prepared to receive a Restart message from outside their component at any time.
	    The component is shutdown as with Shutdown and recreated by the Supervisor. As it is recreated,
	    the component follows the initialization lifecycle commands by implementing the initialize() handler.
	    The component is unregistered from the Location Service and registered again when recreated.
	  """
	}
	{
		name = GoOffline
		description = """
	    Every component must be prepared to receive a GoOffline message from outside their component at any time.
	    The Supervisor receives the command and calls the component's onGoOffline() handler.
	    The component should assume it is not in use and change its behavior as needed. Behavior changes might include
	    ensuring no tracking loops relying on the telescope position are running and moving hardware or
	    publishing demand events for other subsystems.
	  """
	}
	{
		name = GoOnline
		description = """
	    A component in the offline state must be prepared to receive a GoOnline message from outside their component at any time.
	    The Supervisor receives the command and if the component is offline, it calls the component's onGoOnline() handler.
	    The component should assume it is in use and change its behavior as needed to become fully functional for observing.
	  """
	}
	{
		name = DiagnosticMode
		description = """
	    Every component must be prepared to receive a DiagnosticMode message from outside their component at any time.
	    The DiagnosticMode command is received as a Setup with name diagnosticMode when the component is in the Running
	    lifecycle state.
	    The component should review the hint and make any changes in its event publishing behavior called for by the hint.
	    Even if the component does not define any diagnostic modes, it must be prepared to receive a diagnosticMode Setup.
      The diagnostic mode hints of a component are published in the component's model files.
	  """
		args = [
			{
				name = hint
				type = string
				description = """
          The hint is a simple string that is used to indicate one of the component's diagnostic modes.
          The diagnostic mode hints of a component are published in the component's model files.
          Generally, hints will alter the event publishing behavior of a component while it is operating.
        """
			}
			{
				name = startTime
				type = taiDate
				description = """
          The time that the diagnostic mode should begin. TBD
        """
			}
		]
	}
	{
		name = OperationsMode
		description = """
	    Every component must be prepared to receive an OperationsMode message from outside their component at any time.
	    The OperationsMode command is received as a Setup with name operationsMode when the component is in the Running
	    lifecycle state.
	    If in a diagnostic mode, the component should immediately halt the diagnostic mode publishing and return to
	    normal operations behavior.
	    Even if the component does not define any diagnostic modes, it must be prepared to receive a operationsMode Setup.
	  """
	}
]


